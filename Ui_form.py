# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/Users/alpha/Projects/qt/py1/form.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtWebEngineWidgets import *
from PyQt5.QtWebChannel import QWebChannel
from loguru import logger as log
import res


class Ui_MainWindow(QtWidgets.QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

import sys

class Circle(QGraphicsEllipseItem):
    def __init__(self, x, y, w, h, view: QGraphicsView):
        super().__init__(x, y, w, h)
        self.view = view
        
    def mousePressEvent(self, event):
        self.view.scale(2.0, 2.0)
        # QMessageBox(QMessageBox.Icon.Information, 'Test', 'Test circle').exec()
        return super().mousePressEvent(event)
    
    def mouseMoveEvent(self, event):
        self.view.scale(0.5, 0.5)
        return super().mouseMoveEvent(event)


class Bridge(QObject):
    def __init__(self):
        super().__init__()
        self.view = QWebEngineView()
        self.num = 138
        
    @QtCore.pyqtSlot(int)
    def some_slot(self, num):
        log.info('Slot Invoked')
        log.warning('The number is {}', num)
        self.view.page().runJavaScript("""
            document.getElementById('list').innerHTML = '%d';
        """ % num)
        self.num = 5
        
    eventer = pyqtSignal()
    
    @QtCore.pyqtSlot()
    def remove(self):
        self.view.page().runJavaScript("""
            document.getElementById('list').parentNode.removeChild(document.getElementById('list'));
        """)
        
            
        
        
if __name__ == '__main__':
    app = QApplication(sys.argv)
    bridge = Bridge()
    channel = QWebChannel(bridge.view.page())
    bridge.view.page().setWebChannel(channel)
    channel.registerObject('helperBridge', bridge)
    bridge.view.setFixedSize(800, 800)
    but = QPushButton('text')
    with open('index.html', 'r') as f:
        html = f.read()
        bridge.view.setHtml(html)
    
    # but.clicked.connect(lambda: bridge.eventer.emit(138))
    # but.clicked.connect(bridge.remove)
    num = 138
    but.clicked.connect(lambda: bridge.some_slot(bridge.num))
    but.show()
    bridge.view.show()
    app.exec_()